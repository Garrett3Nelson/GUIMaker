program GUIMaker;
{$DEFINE SCRIPT_GUI}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

{$IFDEF SCRIPT_GUI}
type
  eRefType = (COMBO, LIST, BUTTON, EDIT, CHECKBOX, MEMO);

  tGUIPanel = record
    RefPoint : tPoint;
    RefType : eRefType;
    LabeledPanel : tLabeledPanel;
    Edits : array of tLabeledEdit;
    Buttons : array of tButton;
end;

type
  tGUIMaker = record(TScriptForm)
    Combos : array of tLabeledComboBox;
    Lists : array of tLabeledListBox;
    Edits : array of tLabeledEdit;
    Buttons : array of tButton;
    CheckBox : array of tLabeledCheckbox;
    Memos : array of tLabeledMemo;
    GridPanel : tPanel;
    CreationPanel, ElementPanel, EditPanel : tGUIPanel;
    AlignGrid : tBoxArray;
  end;

function GetCursorPos(var p: TPoint): LongBool; static; external 'GetCursorPos@user32.dll ' + {$IFDEF CPU386}'stdcall'{$ELSE}'win64'{$ENDIF};

function TTabSheet.CreateComboBox(Name, Caption: String; TopLeft : tPoint; Width : Int32; Items : tStringArray = []; Style : TComboBoxStyle = csDropDownList) : tLabeledComboBox;
var
  item : String;
begin
  Result.Create(Self);
  Result.SetName(Name);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(42));

  // Contents
  Result.SetCaption(Caption);
  if Length(Items) > 0 then
  begin
    {$H-}for item in Items do{$H+}
      Result.ComboBox.GetItems.Add(trim(item));

    Result.ComboBox.SetItemIndex(0);
  end;

  Result.ComboBox.SetStyle(Style);
end;

function TTabSheet.CreateListBox(Name, Caption: String; TopLeft : tPoint; Width, Height : Int32; Items : tStringArray = []; Style : TListBoxStyle = lbStandard) : tLabeledListBox;
var
  item : String;
begin
  Result.Create(Self);
  Result.SetName(Name);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(Height));

  // Contents
  Result.SetCaption(Caption);
  if Length(Items) > 0 then
  begin
    {$H-}for item in Items do{$H+}
      Result.ListBox.GetItems.Add(trim(item));

    //Result.ListBox.SetItemIndex(0);
  end;

  Result.ListBox.SetStyle(Style);
end;

function TTabSheet.CreateButton(Name, Caption, Tooltip : String; TopLeft : tPoint; Width, Height : Int32) : tButton;
begin
  Result.Create(Self);
  Result.SetName(Name);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(Height));

  // Contents
  Result.SetCaption(Caption);
  Result.SetTooltip(Tooltip);
end;

function TTabSheet.CreateEdit(Name, Caption, Text, Tooltip: String; TopLeft : tPoint; Width : Int32; MaxLength : Int32 = -1) : tLabeledEdit;
begin
  Result.Create(Self);
  Result.SetName(Name);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(42));

  // Contents
  Result.SetCaption(Caption);
  Result.SetText(Text);
  Result.SetTooltip(Tooltip);

  if MaxLength > 0 then
    Result.SetMaxLength(MaxLength);
end;

function TTabSheet.CreateCheckBox(Name, Caption, Tooltip: String; TopLeft : tPoint; Checked : Boolean = True) : tLabeledCheckbox;
begin
  Result.Create(Self);
  Result.SetName(Name);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));

  // Contents
  Result.SetCaption(Caption);
  Result.SetTooltip(Tooltip);
  Result.SetChecked(Checked);
end;

function TTabSheet.CreateLabeledPanel(Caption: String; TopLeft : tPoint; Width, Height, FontSize : Int32; Color : tColor = 0; FontStyles: TFontStyles = []) : tLabeledPanel;
begin
  Result.Create(Self);
  Result.Caption.SetCaption(Caption);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(Height));

  // Font
  Result.Caption.SetFontSize(FontSize);
  Result.Caption.SetFontColor(color);
  if FontStyles <> [] then
    Result.Caption.getFont().setStyle(FontStyles);
end;

function TTabSheet.CreatePanel(TopLeft : tPoint; Width, Height : Int32) : tPanel;
begin
  Result.Create(Self);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(Height));
end;

function TTabSheet.CreateLabeledMemo(Name, Caption, Memo: String; TopLeft : tPoint; Width, Height, CaptionFontSize, MemoFontSize : Int32; CaptionColor, MemoColor : tColor; CaptionFontStyles, MemoFontStyles: TFontStyles) : tLabeledMemo;
begin
  Result.Create(Self);
  Result.SetName(Name);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(Height));

  //Caption
  Result.Caption.SetCaption(Caption);
  Result.Caption.SetFontSize(CaptionFontSize);
  Result.Caption.SetFontColor(CaptionColor);
  if CaptionFontStyles <> [] then
    Result.Caption.getFont().setStyle(CaptionFontStyles);

  //Memo
  Result.Memo.setText(Memo);
  Result.Memo.SetFontSize(MemoFontSize);
  Result.Memo.SetFontColor(MemoColor);
  if MemoFontStyles <> [] then
    Result.Memo.getFont().setStyle(MemoFontStyles);
end;

function tGUIMaker.CreateComboBox(Name, Caption: String; TopLeft : tPoint; Width : Int32; Items : tStringArray = []; Style : TComboBoxStyle = csDropDownList) : tLabeledComboBox;
var
  CurrentTab: tTabSheet;
begin
  CurrentTab := Self.PageControl.getActivePage();

  Result := CurrentTab.CreateComboBox(Name, Caption, TopLeft, Width, Items, Style);
end;

function tGUIMaker.CreateListBox(Name, Caption: String; TopLeft : tPoint; Width, Height : Int32; Items : tStringArray = []; Style : TListBoxStyle = lbStandard) : tLabeledListBox;
var
  CurrentTab: tTabSheet;
begin
  CurrentTab := Self.PageControl.getActivePage();

  Result := CurrentTab.CreateListBox(Name, Caption, TopLeft, Width, Height, Items, Style);
end;

function tGUIMaker.CreateButton(Name, Caption, Tooltip : String; TopLeft : tPoint; Width, Height : Int32) : tButton;
var
  CurrentTab: tTabSheet;
begin
  CurrentTab := Self.PageControl.getActivePage();

  Result := CurrentTab.CreateButton(Name, Caption, Tooltip, TopLeft, Width, Height);
end;

function tGUIMaker.CreateEdit(Name, Caption, Text, Tooltip: String; TopLeft : tPoint; Width : Int32; MaxLength : Int32 = -1) : tLabeledEdit;
var
  CurrentTab: tTabSheet;
begin
  CurrentTab := Self.PageControl.getActivePage();

  Result := CurrentTab.CreateEdit(Name, Caption, Text, Tooltip, TopLeft, Width, MaxLength);
end;

function tGUIMaker.CreateCheckBox(Name, Caption, Tooltip: String; TopLeft : tPoint; Checked : Boolean = True) : tLabeledCheckbox;
var
  CurrentTab: tTabSheet;
begin
  CurrentTab := Self.PageControl.getActivePage();

  Result := CurrentTab.CreateCheckBox(Name, Caption, Tooltip, TopLeft, Checked);
end;

function tGUIMaker.CreateLabeledPanel(Caption: String; TopLeft : tPoint; Width, Height, FontSize : Int32; Color : tColor = 0; FontStyles: TFontStyles = []) : tLabeledPanel;
var
  CurrentTab: tTabSheet;
begin
  CurrentTab := Self.PageControl.getActivePage();

  Result := CurrentTab.CreateLabeledPanel(Caption, TopLeft, Width, Height, FontSize, Color, FontStyles);
end;

function tGUIMaker.CreatePanel(TopLeft : tPoint; Width, Height : Int32) : tPanel;
var
  CurrentTab: tTabSheet;
begin
  CurrentTab := Self.PageControl.getActivePage();

  Result := CurrentTab.CreatePanel(TopLeft, Width, Height);
end;

function tGUIMaker.CreateLabeledMemo(Name, Caption, Memo: String; TopLeft : tPoint; Width, Height, CaptionFontSize, MemoFontSize : Int32; CaptionColor, MemoColor : tColor; CaptionFontStyles, MemoFontStyles: TFontStyles) : tLabeledMemo;
var
  CurrentTab: tTabSheet;
begin
  CurrentTab := Self.PageControl.getActivePage();

  Result := CurrentTab.CreateLabeledMemo(Name, Caption, Memo, TopLeft, Width, Height, CaptionFontSize, MemoFontSize, CaptionColor, MemoColor, CaptionFontStyles, MemoFontStyles);
end;

function tPanel.CreateButton(Name, Caption, Tooltip : String; TopLeft : tPoint; Width, Height : Int32) : tButton;
begin
  Result.Create(Self);
  Result.SetName(Name);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(Height));

  // Contents
  Result.SetCaption(Caption);
  Result.SetTooltip(Tooltip);
end;

function tPanel.CreateEdit(Name, Caption, Text, Tooltip: String; TopLeft : tPoint; Width : Int32; MaxLength : Int32 = -1) : tLabeledEdit;
begin
  Result.Create(Self);
  Result.SetName(Name);

  // Alignment
  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));
  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));
  Result.SetWidth(TControl.AdjustToDPI(Width));
  Result.SetHeight(TControl.AdjustToDPI(42));

  // Contents
  Result.SetCaption(Caption);
  Result.SetText(Text);
  Result.SetTooltip(Tooltip);

  if MaxLength > 0 then
    Result.SetMaxLength(MaxLength);
end;

procedure tGUIPanel.DestroyAll(sender: tObject);
var
  i : Int32;
begin
  if Length(Self.Edits) > 0 then
    for i := 0 to high(Self.Edits) do
    begin
      //Self.ElementPanel.Edits[i].Caption.DestroyComponents();
      //Self.ElementPanel.Edits[i].Edit.DestroyComponents();
      Self.Edits[i].Panel.DestroyComponents();
    end;

  if Length(Self.Buttons) > 0 then
    for i := 0 to high(Self.Buttons) do
      Self.Buttons[i].DestroyComponents();

  //Self.LabeledPanel.Panel.DestroyComponents();
  Self.LabeledPanel.SetVisible(False);
end;

function tGUIMaker.CreateName(name : String) : String;
var
  ElementName : string;
begin
  ElementName := name.ToLower();
  ElementName := ElementName.Replace(' ', '_');

  if Assigned(Self.Form.GetChild(ElementName)) or Assigned(Self.Form.GetChild(ElementName+'_panel'))then
    result := Self.CreateName(ElementName+'2')
  else
    result := ElementName;
end;

procedure tGUIMaker.ElementCreation(sender: tObject);
var
  nextElement : Int32;
  ElementName : string;
begin
  case Self.ElementPanel.RefType of
    eRefType.COMBO:
    begin
      nextElement := High(Self.Combos) + 1;
      SetLength(Self.Combos, nextElement+1);

      ElementName := Self.CreateName(Self.ElementPanel.Edits[0].Edit.getText());

      Self.Combos[NextElement] := Self.CreateComboBox(ElementName, Self.ElementPanel.Edits[0].Edit.getText(), Self.CreationPanel.RefPoint, StrToInt(Self.ElementPanel.Edits[2].Edit.getText()), Explode(',',Self.ElementPanel.Edits[1].Edit.getText()));
    end;
    eRefType.LIST:
    begin
      nextElement := High(Self.Lists) + 1;
      SetLength(Self.Lists, nextElement+1);

      ElementName := Self.CreateName(Self.ElementPanel.Edits[0].Edit.getText());

      Self.Lists[NextElement] := Self.CreateListBox(ElementName, Self.ElementPanel.Edits[0].Edit.getText(), Self.CreationPanel.RefPoint, StrToInt(Self.ElementPanel.Edits[2].Edit.getText()), StrToInt(Self.ElementPanel.Edits[3].Edit.getText()), Explode(',',Self.ElementPanel.Edits[1].Edit.getText()));
    end;
    eRefType.BUTTON:
    begin
      nextElement := High(Self.Buttons) + 1;
      SetLength(Self.Buttons, nextElement+1);

      ElementName := Self.CreateName(Self.ElementPanel.Edits[0].Edit.getText());

      Self.Buttons[NextElement] := Self.CreateButton(ElementName, Self.ElementPanel.Edits[0].Edit.getText(), Self.ElementPanel.Edits[1].Edit.getText(), Self.CreationPanel.RefPoint, StrToInt(Self.ElementPanel.Edits[2].Edit.getText()), StrToInt(Self.ElementPanel.Edits[3].Edit.getText()));
    end;
    eRefType.EDIT:
    begin
      nextElement := High(Self.Edits) + 1;
      SetLength(Self.Edits, nextElement+1);

      ElementName := Self.CreateName(Self.ElementPanel.Edits[0].Edit.getText());

      Self.Edits[NextElement] := Self.CreateEdit(ElementName, Self.ElementPanel.Edits[0].Edit.getText(), Self.ElementPanel.Edits[1].Edit.getText(), Self.ElementPanel.Edits[2].Edit.getText(), Self.CreationPanel.RefPoint, StrToInt(Self.ElementPanel.Edits[3].Edit.getText()), StrToInt(Self.ElementPanel.Edits[4].Edit.getText()));
    end;
    eRefType.CHECKBOX:
    begin
      nextElement := High(Self.CheckBox) + 1;
      SetLength(Self.CheckBox, nextElement+1);

      ElementName := Self.CreateName(Self.ElementPanel.Edits[0].Edit.getText());

      Self.CheckBox[NextElement] := Self.CreateCheckBox(ElementName, Self.ElementPanel.Edits[0].Edit.getText(), Self.ElementPanel.Edits[1].Edit.getText(), Self.CreationPanel.RefPoint, True);
    end;
    eRefType.MEMO:
    begin
      nextElement := High(Self.Memos) + 1;
      SetLength(Self.Memos, nextElement+1);

      ElementName := Self.CreateName(Self.ElementPanel.Edits[0].Edit.getText());

      Self.Memos[NextElement] := Self.CreateLabeledMemo(ElementName, Self.ElementPanel.Edits[0].Edit.getText(), Self.ElementPanel.Edits[1].Edit.getText(), Self.CreationPanel.RefPoint, StrToInt(Self.ElementPanel.Edits[2].Edit.getText()), StrToInt(Self.ElementPanel.Edits[3].Edit.getText()), 12, 10, 0, 0, [], []);
    end;
  end;

  Self.ElementPanel.DestroyAll(sender);
  Self.GridPanel.SetVisible(True);
end;

procedure tGUIMaker.DrawGrid(sender: tObject);
var
  i : Int32;
  tempRect : tRect;
  b : tBox;
begin
  Self.GridPanel.getCanvas().getPen().setWidth(0);

  for i := 0 to high(self.AlignGrid) do
  begin
    b := Self.AlignGrid[i];
    tempRect := [b.X1, b.Y1, b.X2, b.y2];
    Self.GridPanel.getCanvas().Rectangle(tempRect);
  end;

  Self.GridPanel.SendToBack();
end;

function tBoxArray.GetClosestCorner(p : tPoint): tPoint;
var
  b : tBox;
  boxPoints: tPointArray;
  intersection : tPoint;
  i : Int32;
begin
  //Writeln('Point clicked: ', p);
  Result := Point(0,0);

  for b in self do
  begin
    boxPoints := [Point(b.X1, b.y1), Point(b.X2, b.y1), Point(b.X1, b.y2), Point(b.X2, b.y2)];

    for i := 0 to high(boxPoints) do
    begin
      intersection := boxPoints[i];

      if intersection.DistanceTo(p) < Result.DistanceTo(p) then
        result := intersection;
    end;
  end;

  //Writeln('Closest Edge: ', result);
end;

procedure tGUIPanel.Center(w, h : Int32);
var
  height, width, hSpace, ySpace : Int32;
begin
  width := Self.LabeledPanel.Panel.getWidth();
  height := Self.LabeledPanel.Panel.getHeight();

  hSpace := Floor((w - width)/2);
  ySpace := Floor((h - height)/2);

  Self.LabeledPanel.Panel.setTop(0);
  Self.LabeledPanel.Panel.setLeft(hSpace);
end;

procedure tGUIMaker.ControlCreationPanel(sender: tObject);
var
  SenderButton : tButton;
  LastEdit : Int32;
begin
  SenderButton := tButton(sender);

  Self.ElementPanel.LabeledPanel := Self.CreateLabeledPanel('Input New Element Details', Self.CreationPanel.RefPoint, 400, 400, 12, 0);
  Self.ElementPanel.LabeledPanel.Panel.setBorderStyle(bsSingle);
  Self.ElementPanel.LabeledPanel.Panel.setBevelOuter(bvNone);
  Self.ElementPanel.LabeledPanel.Panel.BringToFront();

  case SenderButton.getCaption() of
    'ComboBox':
    begin
      SetLength(Self.ElementPanel.Edits, 3);
      Self.ElementPanel.RefType := eRefType.COMBO;

      Self.ElementPanel.Edits[0] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_caption', 'Caption', 'New Combobox', 'Enter Caption', Point(0, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[1] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_items', 'Items', 'Item1,Item2,Item3', 'Enter Combo Items', Point(Self.ElementPanel.Edits[0].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[2] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_width', 'Width', '100', 'Enter Width', Point(Self.ElementPanel.Edits[1].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
    end;
    'ListBox':
    begin
      SetLength(Self.ElementPanel.Edits, 4);
      Self.ElementPanel.RefType := eRefType.LIST;

      Self.ElementPanel.Edits[0] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_caption', 'Caption', 'New Listbox', 'Enter Caption', Point(0, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[1] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_items', 'Items', 'Item1,Item2,Item3', 'Enter List Items', Point(Self.ElementPanel.Edits[0].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[2] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_width', 'Width', '100', 'Enter Width', Point(Self.ElementPanel.Edits[1].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[3] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_height', 'Height', '50', 'Enter Height', Point(Self.ElementPanel.Edits[2].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
    end;
    'Button':
    begin
      SetLength(Self.ElementPanel.Edits, 4);
      Self.ElementPanel.RefType := eRefType.BUTTON;

      Self.ElementPanel.Edits[0] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_caption', 'Caption', 'New Button', 'Enter Caption', Point(0, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[1] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_tooltip', 'ToolTip', 'Tooltip Text', 'Enter ToolTip', Point(Self.ElementPanel.Edits[0].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[2] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_width', 'Width', '100', 'Enter Width', Point(Self.ElementPanel.Edits[1].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[3] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_height', 'Height', '50', 'Enter Height', Point(Self.ElementPanel.Edits[2].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
    end;
    'Edit':
    begin
      SetLength(Self.ElementPanel.Edits, 5);
      Self.ElementPanel.RefType := eRefType.EDIT;

      Self.ElementPanel.Edits[0] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_caption', 'Caption', 'New Edit', 'Enter Caption', Point(0, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[1] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_text', 'Default Text', 'Text', 'Enter Default Text', Point(Self.ElementPanel.Edits[0].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[2] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_tooltip', 'ToolTip', 'Tooltip Text', 'Enter ToolTip', Point(Self.ElementPanel.Edits[1].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[3] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_width', 'Width', '100', 'Enter Width', Point(Self.ElementPanel.Edits[2].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[4] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_length', 'Max Input Length', '-1', 'Enter Max Input Length', Point(Self.ElementPanel.Edits[3].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
    end;
    'CheckBox':
    begin
      SetLength(Self.ElementPanel.Edits, 2);
      Self.ElementPanel.RefType := eRefType.CHECKBOX;

      Self.ElementPanel.Edits[0] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_caption', 'Caption', 'New Checkbox', 'Enter Caption', Point(0, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[1] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_tooltip', 'ToolTip', 'Tooltip Text', 'Enter ToolTip', Point(Self.ElementPanel.Edits[0].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
    end;
    'Memo':
    begin
      SetLength(Self.ElementPanel.Edits, 4);
      Self.ElementPanel.RefType := eRefType.MEMO;

      Self.ElementPanel.Edits[0] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_caption', 'Caption', 'New Memo', 'Enter Caption', Point(0, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[1] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_text', 'Default Text', 'Text', 'Enter Default Text', Point(Self.ElementPanel.Edits[0].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[2] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_width', 'Width', '100', 'Enter Width', Point(Self.ElementPanel.Edits[1].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
      Self.ElementPanel.Edits[3] := Self.ElementPanel.LabeledPanel.Panel.CreateEdit('ep_enter_height', 'Height', '50', 'Enter Height', Point(Self.ElementPanel.Edits[2].GetRight() + 5, Self.ElementPanel.LabeledPanel.Caption.GetBottom() + 10), 100);
    end;
  end;

  LastEdit := High(Self.ElementPanel.Edits);
  SetLength(Self.ElementPanel.Buttons, 2);

  Self.ElementPanel.Buttons[0] := Self.ElementPanel.LabeledPanel.Panel.CreateButton('ep_create_button', 'Create', 'Create This Element', Point(0, Self.ElementPanel.Edits[LastEdit].GetBottom() + 5), 75, 30);
  Self.ElementPanel.Buttons[1] := Self.ElementPanel.LabeledPanel.Panel.CreateButton('ep_close_button', 'Cancel', 'Cancel Creation', Point(Self.ElementPanel.Buttons[0].GetRight() + 5, Self.ElementPanel.Edits[LastEdit].GetBottom() + 5), 75, 30);

  Self.ElementPanel.Buttons[0].setOnClick(@self.ElementCreation);
  Self.ElementPanel.Buttons[1].setOnClick(@Self.ElementPanel.DestroyAll);
  Self.ElementPanel.LabeledPanel.Panel.setHeight(10 + (self.ElementPanel.Buttons[1].GetBottom() - Self.ElementPanel.LabeledPanel.Caption.GetTop()));
  Self.ElementPanel.LabeledPanel.Panel.setWidth(10 + (Self.ElementPanel.Edits[LastEdit].GetRight() - Self.ElementPanel.Edits[0].GetLeft()));

  Self.ElementPanel.Center(Self.GridPanel.getWidth(), self.GridPanel.getHeight());
  Self.CreationPanel.LabeledPanel.SetVisible(False);
end;

procedure tGUIMaker.MakeCreationPanel(p: tPoint);
var
  CurrentTab: tTabSheet;
  i : Int32;
begin
  CurrentTab := Self.PageControl.getActivePage();
  if Assigned(Self.CreationPanel.LabeledPanel.Panel) then
    Self.CreationPanel.LabeledPanel.SetVisible(True)
  else
  begin
    Self.CreationPanel.LabeledPanel := Self.CreateLabeledPanel('Choose Type of New Element', p, 200, 400, 12, 0);
    Self.CreationPanel.LabeledPanel.Panel.setBorderStyle(bsSingle);
    Self.CreationPanel.LabeledPanel.Panel.setBevelOuter(bvNone);

    SetLength(self.CreationPanel.Buttons, 6);
    self.CreationPanel.Buttons[0] := Self.CreationPanel.LabeledPanel.Panel.CreateButton('ComboBox', 'ComboBox', 'ComboBox', Point(0, Self.CreationPanel.LabeledPanel.Caption.GetBottom()+10), 100, 20);
    self.CreationPanel.Buttons[1] := Self.CreationPanel.LabeledPanel.Panel.CreateButton('ListBox', 'ListBox', 'ListBox', Point(Self.CreationPanel.Buttons[0].GetRight() + 5, Self.CreationPanel.LabeledPanel.Caption.GetBottom()+10), 100, 20);
    self.CreationPanel.Buttons[2] := Self.CreationPanel.LabeledPanel.Panel.CreateButton('Button', 'Button', 'Button', Point(Self.CreationPanel.Buttons[1].GetRight() + 5, Self.CreationPanel.LabeledPanel.Caption.GetBottom()+10), 100, 20);
    self.CreationPanel.Buttons[3] := Self.CreationPanel.LabeledPanel.Panel.CreateButton('Edit', 'Edit', 'Edit', Point(Self.CreationPanel.Buttons[2].GetRight() + 5, Self.CreationPanel.LabeledPanel.Caption.GetBottom()+10), 100, 20);
    self.CreationPanel.Buttons[4] := Self.CreationPanel.LabeledPanel.Panel.CreateButton('CheckBox', 'CheckBox', 'CheckBox', Point(Self.CreationPanel.Buttons[3].GetRight() + 5, Self.CreationPanel.LabeledPanel.Caption.GetBottom()+10), 100, 20);
    self.CreationPanel.Buttons[5] := Self.CreationPanel.LabeledPanel.Panel.CreateButton('Memo', 'Memo', 'Memo', Point(Self.CreationPanel.Buttons[4].GetRight() + 5, Self.CreationPanel.LabeledPanel.Caption.GetBottom()+10), 100, 20);

    for i := 0 to high(self.CreationPanel.Buttons) do
      self.CreationPanel.Buttons[i].setOnClick(@Self.ControlCreationPanel);

    Self.CreationPanel.LabeledPanel.Panel.SetHeight(10 + (self.CreationPanel.Buttons[5].GetBottom() - Self.CreationPanel.LabeledPanel.Caption.GetTop()));
    Self.CreationPanel.LabeledPanel.Panel.SetWidth(10 + (self.CreationPanel.Buttons[5].GetRight() - self.CreationPanel.Buttons[0].GetLeft()));
    Self.CreationPanel.Center(Self.GridPanel.getWidth(), self.GridPanel.getHeight());
  end;

  Self.CreationPanel.RefPoint := Self.AlignGrid.GetClosestCorner(p);
  Self.CreationPanel.LabeledPanel.BringToFront();
  Self.GridPanel.SetVisible(False);
end;

procedure tGUIMaker.CreateAtClick(Sender: TObject);
var
  p: TPoint;
begin
  GetCursorPos(p);

  if Assigned(Self.ElementPanel.LabeledPanel.Panel) and (Self.ElementPanel.LabeledPanel.Panel.getVisible()) then exit;
  if Assigned(Self.EditPanel.LabeledPanel.Panel) and (Self.EditPanel.LabeledPanel.Panel.getVisible()) then exit;

  Self.MakeCreationPanel(Self.GridPanel.ScreenToClient(p));
end;

// All functions below are for writing to files

function CreateHeaders() : String;
begin
  result += "program new;" + LineEnding;
  result += "{$DEFINE SCRIPT_GUI}" + LineEnding;
  result += "{$I WaspLib/osr.simba}" + LineEnding + LineEnding;

  result += "{$IFDEF SCRIPT_GUI}" + LineEnding;
end;

function CreateHelpers(): String;
begin
  result += "function TTabSheet.CreateComboBox(Name, Caption: String; TopLeft : tPoint; Width : Int32; Items : tStringArray = []; Style : TComboBoxStyle = csDropDownList) : tLabeledComboBox;" + LineEnding;
  result += "var" + LineEnding;
  result += "  item : String;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Result.Create(Self);" + LineEnding;
  result += "  Result.SetName(Name);" + LineEnding;
  result += "" + LineEnding;
  result += "  // Alignment" + LineEnding;
  result += "  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));" + LineEnding;
  result += "  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));" + LineEnding;
  result += "  Result.SetWidth(TControl.AdjustToDPI(Width));" + LineEnding;
  result += "  Result.SetHeight(TControl.AdjustToDPI(42));" + LineEnding;
  result += "" + LineEnding;
  result += "  // Contents" + LineEnding;
  result += "  Result.SetCaption(Caption);" + LineEnding;
  result += "  if Length(Items) > 0 then" + LineEnding;
  result += "  begin" + LineEnding;
  result += "    {$H-}for item in Items do{$H+}" + LineEnding;
  result += "      Result.ComboBox.GetItems.Add(trim(item));" + LineEnding;
  result += "" + LineEnding;
  result += "    Result.ComboBox.SetItemIndex(0);" + LineEnding;
  result += "  end;" + LineEnding;
  result += "" + LineEnding;
  result += "  Result.ComboBox.SetStyle(Style);" + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "function TTabSheet.CreateListBox(Name, Caption: String; TopLeft : tPoint; Width, Height : Int32; Items : tStringArray = []; Style : TListBoxStyle = lbStandard) : tLabeledListBox;" + LineEnding;
  result += "var" + LineEnding;
  result += "  item : String;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Result.Create(Self);" + LineEnding;
  result += "  Result.SetName(Name);" + LineEnding;
  result += "" + LineEnding;
  result += "  // Alignment" + LineEnding;
  result += "  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));" + LineEnding;
  result += "  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));" + LineEnding;
  result += "  Result.SetWidth(TControl.AdjustToDPI(Width));" + LineEnding;
  result += "  Result.SetHeight(TControl.AdjustToDPI(Height));" + LineEnding;
  result += "" + LineEnding;
  result += "  // Contents" + LineEnding;
  result += "  Result.SetCaption(Caption);" + LineEnding;
  result += "  if Length(Items) > 0 then" + LineEnding;
  result += "  begin" + LineEnding;
  result += "    {$H-}for item in Items do{$H+}" + LineEnding;
  result += "      Result.ListBox.GetItems.Add(trim(item));" + LineEnding;
  result += "" + LineEnding;
  result += "    //Result.ListBox.SetItemIndex(0);" + LineEnding;
  result += "  end;" + LineEnding;
  result += "" + LineEnding;
  result += "  Result.ListBox.SetStyle(Style);" + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "function TTabSheet.CreateButton(Name, Caption, Tooltip : String; TopLeft : tPoint; Width, Height : Int32) : tButton;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Result.Create(Self);" + LineEnding;
  result += "  Result.SetName(Name);" + LineEnding;
  result += "" + LineEnding;
  result += "  // Alignment" + LineEnding;
  result += "  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));" + LineEnding;
  result += "  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));" + LineEnding;
  result += "  Result.SetWidth(TControl.AdjustToDPI(Width));" + LineEnding;
  result += "  Result.SetHeight(TControl.AdjustToDPI(Height));" + LineEnding;
  result += "" + LineEnding;
  result += "  // Contents" + LineEnding;
  result += "  Result.SetCaption(Caption);" + LineEnding;
  result += "  Result.SetTooltip(Tooltip);" + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "function TTabSheet.CreateEdit(Name, Caption, Text, Tooltip: String; TopLeft : tPoint; Width : Int32; MaxLength : Int32 = -1) : tLabeledEdit;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Result.Create(Self);" + LineEnding;
  result += "  Result.SetName(Name);" + LineEnding;
  result += "" + LineEnding;
  result += "  // Alignment" + LineEnding;
  result += "  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));" + LineEnding;
  result += "  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));" + LineEnding;
  result += "  Result.SetWidth(TControl.AdjustToDPI(Width));" + LineEnding;
  result += "  Result.SetHeight(TControl.AdjustToDPI(42));" + LineEnding;
  result += "" + LineEnding;
  result += "  // Contents" + LineEnding;
  result += "  Result.SetCaption(Caption);" + LineEnding;
  result += "  Result.SetText(Text);" + LineEnding;
  result += "  Result.SetTooltip(Tooltip);" + LineEnding;
  result += "" + LineEnding;
  result += "  if MaxLength > 0 then" + LineEnding;
  result += "    Result.SetMaxLength(MaxLength);" + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "function TTabSheet.CreateCheckBox(Name, Caption, Tooltip: String; TopLeft : tPoint; Checked : Boolean = True) : tLabeledCheckbox;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Result.Create(Self);" + LineEnding;
  result += "  Result.SetName(Name);" + LineEnding;
  result += "" + LineEnding;
  result += "  // Alignment" + LineEnding;
  result += "  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));" + LineEnding;
  result += "  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));" + LineEnding;
  result += "" + LineEnding;
  result += "  // Contents" + LineEnding;
  result += "  Result.SetCaption(Caption);" + LineEnding;
  result += "  Result.SetTooltip(Tooltip);" + LineEnding;
  result += "  Result.SetChecked(Checked);" + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "function TTabSheet.CreateLabeledPanel(Caption: String; TopLeft : tPoint; Width, Height, FontSize : Int32; Color : tColor = 0; FontStyles: TFontStyles = []) : tLabeledPanel;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Result.Create(Self);" + LineEnding;
  result += "  Result.Caption.SetCaption(Caption);" + LineEnding;
  result += "" + LineEnding;
  result += "  // Alignment" + LineEnding;
  result += "  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));" + LineEnding;
  result += "  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));" + LineEnding;
  result += "  Result.SetWidth(TControl.AdjustToDPI(Width));" + LineEnding;
  result += "  Result.SetHeight(TControl.AdjustToDPI(Height));" + LineEnding;
  result += "" + LineEnding;
  result += "  // Font" + LineEnding;
  result += "  Result.Caption.SetFontSize(FontSize);" + LineEnding;
  result += "  Result.Caption.SetFontColor(color);" + LineEnding;
  result += "  if FontStyles <> [] then" + LineEnding;
  result += "    Result.Caption.getFont().setStyle(FontStyles);" + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "function TTabSheet.CreatePanel(TopLeft : tPoint; Width, Height : Int32) : tPanel;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Result.Create(Self);" + LineEnding;
  result += "" + LineEnding;
  result += "  // Alignment" + LineEnding;
  result += "  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));" + LineEnding;
  result += "  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));" + LineEnding;
  result += "  Result.SetWidth(TControl.AdjustToDPI(Width));" + LineEnding;
  result += "  Result.SetHeight(TControl.AdjustToDPI(Height));" + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "function TTabSheet.CreateLabeledMemo(Name, Caption, Memo: String; TopLeft : tPoint; Width, Height, CaptionFontSize, MemoFontSize : Int32; CaptionColor, MemoColor : tColor; CaptionFontStyles, MemoFontStyles: TFontStyles) : tLabeledMemo;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Result.Create(Self);" + LineEnding;
  result += "  Result.SetName(Name);" + LineEnding;
  result += "" + LineEnding;
  result += "  // Alignment" + LineEnding;
  result += "  Result.SetLeft(TControl.AdjustToDPI(TopLeft.X));" + LineEnding;
  result += "  Result.SetTop(TControl.AdjustToDPI(TopLeft.Y));" + LineEnding;
  result += "  Result.SetWidth(TControl.AdjustToDPI(Width));" + LineEnding;
  result += "  Result.SetHeight(TControl.AdjustToDPI(Height));" + LineEnding;
  result += "" + LineEnding;
  result += "  //Caption" + LineEnding;
  result += "  Result.Caption.SetCaption(Caption);" + LineEnding;
  result += "  Result.Caption.SetFontSize(CaptionFontSize);" + LineEnding;
  result += "  Result.Caption.SetFontColor(CaptionColor);" + LineEnding;
  result += "  if CaptionFontStyles <> [] then" + LineEnding;
  result += "    Result.Caption.getFont().setStyle(CaptionFontStyles);" + LineEnding;
  result += "" + LineEnding;
  result += "  //Memo" + LineEnding;
  result += "  Result.Memo.setText(Memo);" + LineEnding;
  result += "  Result.Memo.SetFontSize(MemoFontSize);" + LineEnding;
  result += "  Result.Memo.SetFontColor(MemoColor);" + LineEnding;
  result += "  if MemoFontStyles <> [] then" + LineEnding;
  result += "    Result.Memo.getFont().setStyle(MemoFontStyles);" + LineEnding;
  result += "end;" + LineEnding;
end;

function NameToVariable(name: String) : String;
begin
  result := name.Replace('_', ' ');
  result := result.TitleCase();
  result := result.Replace(' ', '');
end;

function tGUIMaker.CreateRecord() : String;
var
  i : Int32;
begin
  result += 'type ' + LineEnding;
  result += '  TMyScriptForm = record(tScriptForm)' + LineEnding;

  if length(Self.Combos) > 0 then
    for i := 0 to high(Self.Combos) do
      result += '    ' + NameToVariable(Self.Combos[i].GetName()) + ': tLabeledComboBox;' + LineEnding;

  if length(Self.Lists) > 0 then
    for i := 0 to high(Self.Lists) do
      result += '    ' + NameToVariable(Self.Lists[i].GetName()) + ': tLabeledListBox;' + LineEnding;

  if length(Self.Edits) > 0 then
    for i := 0 to high(Self.Edits) do
      result += '    ' + NameToVariable(Self.Edits[i].GetName()) + ': tLabeledEdit;' + LineEnding;

  if length(Self.Buttons) > 0 then
    for i := 0 to high(Self.Buttons) do
      result += '    ' + NameToVariable(Self.Buttons[i].GetName()) + ': tButton;' + LineEnding;

  if length(Self.CheckBox) > 0 then
    for i := 0 to high(Self.CheckBox) do
      result += '    ' + NameToVariable(Self.CheckBox[i].GetName()) + ': tLabeledCheckbox;' + LineEnding;

  if length(Self.Memos) > 0 then
    for i := 0 to high(Self.Memos) do
      result += '    ' + NameToVariable(Self.Memos[i].GetName()) + ': tLabeledMemo;' + LineEnding;

  result += 'end;' + LineEnding;
end;

function tStrings.MergeToFile(): String;
var
  i, h : Int32;
begin
  h := self.getCount() - 1;
  if h < 0 then Exit;

  if h = 0 then
    Exit("['" + Self.getStrings(i) + "']");

  result := "['";
  for i := 0 to h-1 do
    Result += self.getStrings(i) + "', '";

  result += self.getStrings(h) + "']";
end;

function tGUIMaker.CreateAllComboBoxes() : String;
var
  i : Int32;
  cmb : tLabeledComboBox;
  variableName : String;
  items : tStrings;
begin
  if length(Self.Combos) = 0 then Exit();

  //(Name, Caption: String; TopLeft : tPoint; Width : Int32; Items : tStringArray = []; Style : TComboBoxStyle = csDropDownList) : tLabeledComboBox;
  for i := 0 to high(self.Combos) do
  begin
    cmb := self.Combos[i];
    variableName := NameToVariable(cmb.GetName());
    items := cmb.ComboBox.getItems();
    Result += "  " + variableName + " := CurrentTab.CreateComboBox('" + cmb.GetName() + "', '" + cmb.Caption.getCaption() + "', Point(" + toStr(cmb.Panel.getLeft()) + ', ' + toStr(cmb.Panel.getTop()) + '), ' + toStr(cmb.Panel.getWidth()) + ', ' + items.MergeToFile() + ', ' + toStr(cmb.ComboBox.getStyle()) + ');' + LineEnding;
  end;

  result += LineEnding;
end;

function tGUIMaker.CreateAllListBoxes() : String;
var
  i : Int32;
  listb : tLabeledListBox;
  variableName : String;
  items : tStrings;
begin
  if length(Self.Lists) = 0 then Exit();

  // CreateListBox(Name, Caption: String; TopLeft : tPoint; Width, Height : Int32; Items : tStringArray = []; Style : TListBoxStyle = lbStandard)
  for i := 0 to high(Self.Lists) do
  begin
    listb := self.Lists[i];
    variableName := NameToVariable(listb.GetName());
    items := listb.ListBox.getItems();
    Result += "  " + variableName + " := CurrentTab.CreateListBox('" + listb.GetName() + "', '" + listb.Caption.getCaption() + "', Point(" + toStr(listb.Panel.getLeft()) + ', ' + toStr(listb.Panel.getTop()) + '), ' + toStr(listb.Panel.getWidth()) + ', ' + toStr(listb.Panel.getHeight()) + ', ' + items.MergeToFile() + ', ' + toStr(listb.ListBox.getStyle()) + ');' + LineEnding;
  end;

  result += LineEnding;
end;

function tGUIMaker.CreateAllEdits() : String;
var
  i : Int32;
  tmp : tLabeledEdit;
  variableName : String;
begin
  if length(Self.Edits) = 0 then Exit();

  // CreateEdit(Name, Caption, Text, Tooltip: String; TopLeft : tPoint; Width : Int32; MaxLength : Int32 = -1) : tLabeledEdit;
  for i := 0 to high(Self.Edits) do
  begin
    tmp := self.Edits[i];
    variableName := NameToVariable(tmp.GetName());
    Result += "  " + variableName + " := CurrentTab.CreateEdit('" + tmp.GetName() + "', '" + tmp.Caption.getCaption() + "', '" + tmp.Edit.GetText() + "', '', Point(" + toStr(tmp.Panel.getLeft()) + ', ' + toStr(tmp.Panel.getTop()) + '), ' + toStr(tmp.Panel.getWidth()) + ', ' + toStr(tmp.Edit.getMaxLength()) + ');' + LineEnding;
  end;

  result += LineEnding;
end;

function tGUIMaker.CreateAllButtons() : String;
var
  i : Int32;
  tmp : tButton;
  variableName : String;
begin
  if length(Self.Buttons) = 0 then Exit();

  // CreateButton(Name, Caption, Tooltip : String; TopLeft : tPoint; Width, Height : Int32)
  for i := 0 to high(Self.Buttons) do
  begin
    tmp := self.Buttons[i];
    variableName := NameToVariable(tmp.GetName());
    Result += "  " + variableName + " := CurrentTab.CreateButton('" + tmp.GetName() + "', '" + tmp.getCaption() + "', '', Point(" + toStr(tmp.getLeft()) + ', ' + toStr(tmp.getTop()) + '), ' + toStr(tmp.getWidth()) + ', ' + toStr(tmp.getHeight()) + ');' + LineEnding;
  end;

  result += LineEnding;
end;

function tGUIMaker.CreateAllCheckBox() : String;
var
  i : Int32;
  tmp : tLabeledCheckbox;
  variableName : String;
begin
  if length(Self.CheckBox) = 0 then Exit();

  //CreateCheckBox(Name, Caption, Tooltip: String; TopLeft : tPoint; Checked : Boolean = True) : tLabeledCheckbox;
  for i := 0 to high(Self.CheckBox) do
  begin
    tmp := self.CheckBox[i];
    variableName := NameToVariable(tmp.GetName());
    Result += "  " + variableName + " := CurrentTab.CreateCheckBox('" + tmp.GetName() + "', '" + tmp.Caption.getCaption() + "', '', Point(" + toStr(tmp.Panel.getLeft()) + ', ' + toStr(tmp.Panel.getTop()) + '), ' + toStr(tmp.Checkbox.IsChecked()) + ');' + LineEnding;
  end;

  result += LineEnding;
end;

function tGUIMaker.CreateAllMemos() : String;
var
  i : Int32;
  tmp : tLabeledMemo;
  variableName : String;
begin
  if length(Self.Memos) = 0 then Exit();

  //CreateLabeledMemo(Name, Caption, Memo: String; TopLeft : tPoint; Width, Height, CaptionFontSize, MemoFontSize : Int32; CaptionColor, MemoColor : tColor; CaptionFontStyles, MemoFontStyles: TFontStyles) : tLabeledMemo;
  for i := 0 to high(Self.Memos) do
  begin
    tmp := self.Memos[i];
    variableName := NameToVariable(tmp.GetName());
    Result += "  " + variableName + " := CurrentTab.CreateLabeledMemo('" + tmp.GetName() + "', '" + tmp.Caption.getCaption() + "', '" + tmp.Memo.getText() + "', Point(" + toStr(tmp.Panel.getLeft()) + ', ' + toStr(tmp.Panel.getTop()) + '), ' + toStr(tmp.Panel.getWidth()) + ', ' + toStr(tmp.Panel.getHeight()) + ', ' + toStr(tmp.Caption.getFont().getSize()) + ', ' + toStr(tmp.Memo.getFont().getSize()) + ', ' + toStr(tmp.Caption.getFont().getColor()) + ', ' + toStr(tmp.Memo.getFont().getColor()) + ', ' + toStr(tmp.Caption.getFont().getStyle()) + ', ' + toStr(tmp.Memo.getFont().getStyle()) + ');' + LineEnding;
  end;
end;

function tGUIMaker.CreateTabProcedure() : String;
begin
  result += "procedure TMyScriptForm.CreateSettings();" + LineEnding;
  result += "var" + LineEnding;
  result += "  CurrentTab : tTabSheet;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Self.AddTab('Settings');" + LineEnding;
  result += "  CurrentTab := Self.Tabs[high(self.Tabs)];" + LineEnding + LineEnding;

  result += Self.CreateAllComboBoxes();
  result += Self.CreateAllListBoxes();
  result += Self.CreateAllEdits();
  result += Self.CreateAllButtons();
  result += Self.CreateAllCheckBox();
  result += Self.CreateAllMemos();

  result += "end;" + LineEnding;
end;

function CreateBoilerPlate() : String;
begin
  result += "procedure TMyScriptForm.StartScript(sender: TObject); override;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  inherited; //This is important if you use TScript.Setup()." + LineEnding;
  result += "" + LineEnding;
  result += "  //Read your script options." + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "procedure TMyScriptForm.Run(); override;" + LineEnding;
  result += "var" + LineEnding;
  result += "  tab: TTabSheet;" + LineEnding;
  result += "begin" + LineEnding;
  result += "  Self.Setup('HELLO WORLD SCRIPT');" + LineEnding;
  result += "  Self.Start.setOnClick(@Self.StartScript);" + LineEnding;
  result += "" + LineEnding;
  result += "  Self.CreateSettings();" + LineEnding;
  result += "" + LineEnding;
  result += "  inherited;" + LineEnding;
  result += "end;" + LineEnding;
  result += "" + LineEnding;
  result += "var" + LineEnding;
  result += "  MyScriptForm: TMyScriptForm;" + LineEnding;
  result += "{$ENDIF}" + LineEnding;
  result += "" + LineEnding;
  result += "begin" + LineEnding;
  result += "  {$IFDEF SCRIPT_GUI}" + LineEnding;
  result += "  MyScriptForm.Run();" + LineEnding;
  result += "  {$ENDIF}" + LineEnding;
  result += "" + LineEnding;
  result += "  //RUN SCRIPT HERE!" + LineEnding;
  result += "end." + LineEnding;
end;

procedure tGUIMaker.SaveToFile();
var
  scriptContent : String;
  scriptLocation : String;
  f : Int32;
begin
  scriptLocation := {$MACRO CURRENT_DIRECTORY} + 'GUITemplate.simba';

  if FileExists(scriptLocation) then DeleteFile(scriptLocation);

  f := CreateFile(ScriptLocation);
  CloseFile(f);

  WriteFileContents(scriptLocation, CreateHeaders(), True);
  WriteFileContents(scriptLocation, self.CreateRecord(), True);
  WriteFileContents(scriptLocation, CreateHelpers(), True);
  WriteFileContents(scriptLocation, self.CreateTabProcedure(), True);
  WriteFileContents(scriptLocation, CreateBoilerPlate(), True);

  SimbaOpenInTab(ScriptLocation);
end;

procedure tGUIMaker.StartScript(sender: TObject); override;
begin
  inherited; //This is important if you use TScript.Setup().

  //Self.SaveToFile();

  //Read your script options.
end;

procedure tGUIMaker.Run(); override;
var
  tab: TTabSheet;
  cols, rows, sidelength : Int32;
begin
  Self.Setup('GUI Creation Tool');
  Self.Start.setOnClick(@Self.StartScript);

  Self.AddTab('Tab 1');
  Self.GridPanel := Self.CreatePanel([0,0], (Self.Size.X-8), (Self.Size.Y-53));
  //Self.GridPanel.setVisible(False);

  sidelength := 15;
  cols := trunc(Self.GridPanel.GetWidth() / sideLength) + 1;
  rows := trunc(Self.GridPanel.GetHeight() / sideLength) + 1;

  Self.AlignGrid := grid(cols, rows, sideLength, sideLength, [0,0], [0,0]);
  Self.GridPanel.setOnPaint(@Self.DrawGrid);
  Self.GridPanel.setOnClick(@CreateAtClick);

  Self.Tabs[High(Self.Tabs)].setOnClick(@CreateAtClick);

  inherited;
end;

var
  MyScriptForm: tGUIMaker;
{$ENDIF}

begin
  {$IFDEF SCRIPT_GUI}
  MyScriptForm.Run();
  {$ENDIF}

  //RUN SCRIPT HERE!
end.
